//////////////////////////
/////  command4c.icc  /////
//////////////////////////

	//----- Command::openDevice()
void	Command::openDevice (	Perspective&		camera	     ,
				Parameter&              parameter    ,
				PostScript&		ps           )
{

	Perspective* dummy_p = &camera ; dummy_p = 0 ;

	flag_device_open = 1 ;
		// flag_device_open is defined at the top of command4.cc

	this->open_PS( ps, parameter );

} // Command::openDevice ()



	//----- Command::closeDevice()
int	Command::closeDevice (	Parameter&              parameter    ,
				PostScript&		ps           )
{

		//----- close device if it is still open
		//..... flag_device_open is defined at the top of this file
	if( flag_device_open ) {
		flag_device_open = 0 ;
		this->close_PS  ( parameter , ps );
		this->preview_PS( parameter      );
	}

		//------
	return 1 ;
	
} // Command::closeDevice()



	//-----  Command::drawAll()
void Command::drawAll(	const Parameter&        parameter    ,
			PostScript&		ps           ,
			List<Object>&		objectServer ,
			Perspective&		camera       ,
			Hid&			hid          ,
			HidLine&		hidline      ,  
			char*			title          )
{
	switch ( parameter.drawing_mode ) {
	 case WIREFRAME : 
	 {
		// Already drawn transiently
		break ;

	 } // WIREFRAME

	 case WF_STORED : {
		if( parameter.device_label == PS2 || parameter.device_label == XWIN2 ) {
			this->drawLine_landscape_PS(	ps            ,
							hidline      ,
							parameter.blank_scale    );
		} else {
			this->drawLine_PS(	ps            ,
						hidline      ,
						parameter.blank_scale    );
		}
		break ;

	 } // WF_STORED

	 default: { // Hidden line/surface removal

		if( parameter.device_label == PS2 || parameter.device_label == XWIN2 ) {
			this->draw_Hid_landscape_PS(	parameter,
							ps, 
							hid , &objectServer ) ; 

			this->drawLine_landscape_PS(	ps            ,
							hidline      ,
							parameter.blank_scale    );
		} else {
			this->draw_Hid_PS(	parameter,
						ps, 
						hid , &objectServer ) ; 

			this->drawLine_PS(	ps            ,
						hidline      ,
						parameter.blank_scale    );
		}

		break ;

	 } // default

	} // switch ( parameter.drawing_mode )


		//----------------------------//
		//------ draw parameters -----//
		//----------------------------//
	if( parameter.flag_display_parameter ) {
			//-----  
		ps.setFont( "Times-Roman" , 24 );
		this->drawString_PS( ps , title , 40, 10);

			//-----
		if( parameter.device_label == PS2 || parameter.device_label == XWIN2 ) {		
			displayAxes_landscape_PS ( ps , camera , parameter );
		} else {
			displayAxes_PS           ( ps , camera , parameter );
		}

			//----- display parameters
		ps.setFont( "Courier" , 12 );
		ps.setRGB ( 0.0, 0.0, 0.0 ) ; 
		this->drawString_PS( ps , "RED:X, GREEN:Y, BLUE:Z (No hidden-line removal for the axes)" , 10, 10);
		this->displayParameter_PS(	ps        ,
						camera    ,
						parameter.epsilon2d  ,
						parameter.epsilon3d  ) ;
	} // if

} // Command::drawAll()


